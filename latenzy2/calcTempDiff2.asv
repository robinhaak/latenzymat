function [fracDiff,relSpikeTimesAgg,spikeFrac1,relSpikeTimes1,spikeFrac2,relSpikeTimes2] = ...
    calcTempDiff2(spikesPerTrial1,spikesPerTrial2,useMaxDur,useFastInterp)
% compute temporal offset vectors, syntax:
% [tempDiff,relSpikeTimesAgg,spikeFrac1,relSpikeTimes1,spikeFrac2,relSpikeTimes2] = ...
%     calcTempDiff2(spikesPerTrial1,spikesPerTrial2,useMaxDur,useFastInterp)
%
% history:
%   v0.9 - 18 February 2025
%   - created by Robin Haak

%% get trial-pooled relative spike times
relSpikeTimes1 = getDistinctSpikes(cell2vec(spikesPerTrial1));
relSpikeTimes2 = getDistinctSpikes(cell2vec(spikesPerTrial2));
relSpikeTimesAgg = cat(1,relSpikeTimes1,relSpikeTimes2);

%add two artificial spikes
relSpikeTimesAgg = [useMaxDur(1);sort(relSpikeTimesAgg(:));useMaxDur(2)];

%% get temporal difference vector
%cond1 goes to S1_n/T1_n; cond2 goes to S2_n/T2_n
sp1 = numel(relSpikeTimes1);
sp2 = numel(relSpikeTimes2);
T1 = numel(spikesPerTrial1);
T2 = numel(spikesPerTrial2);

%spike fraction #1
uniqueSpikeFracs1 = (1:sp1)'/T1;
if useFastInterp
    spikeFrac1 = lininterp1f([useMaxDur(1);relSpikeTimes1;useMaxDur(2)],[0;uniqueSpikeFracs1;sp1/T1],relSpikeTimesAgg,nan)';
else
    spikeFrac1 = interp1([useMaxDur(1);relSpikeTimes1;useMaxDur(2)],[0;uniqueSpikeFracs1;sp1/T1],relSpikeTimesAgg);
end
spikeFrac1 = fillnans(spikeFrac1,sp1,T1);

%spike fraction #2
uniqueSpikeFracs2 = (1:sp2)'/T2;
if useFastInterp
    spikeFrac2 = lininterp1f([useMaxDur(1);relSpikeTimes2;useMaxDur(2)],[0;uniqueSpikeFracs2;sp2/T2],relSpikeTimesAgg,nan)';
else
    spikeFrac2 = interp1([useMaxDur(1);relSpikeTimes2;useMaxDur(2)],[0;uniqueSpikeFracs2;sp2/T2],relSpikeTimesAgg);
end
spikeFrac2 = fillnans(spikeFrac2,sp2,T2);

%take difference
fracDiff = spikeFrac1-spikeFrac2;

%subtract linear
fracLinear


x1 = relSpikeTimesAgg(1);
x2 = relSpikeTimesAgg(end);
y1 = fracDiff(1);
y2 = fracDiff(end);

lin = y1 + (y2 - y1) * (relSpikeTimesAgg - x1) / (x2 - x1);

tempDiffCorr = fracDiff-lin;


end